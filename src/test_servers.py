"""Tests for server and client modules."""
# -*- coding: utf-8 -*-

import pytest
import sys


@pytest.fixture(scope="session")
def fake_socket():
    """Set-up testing for HTTP respose structure."""
    if sys.version_info.major == 3:
        from io import BytesIO
    else:
        from StringIO import StringIO as BytesIO

    class FakeSocket(object):

        def __init__(self, response_str):
            self._file = BytesIO(response_str)

        def makefile(self, *args, **kwargs):
            return self._file

    return FakeSocket


# @pytest.mark.parametrize('message', ['', 'M', 'Hello World!', 'aaaaaaab',
#                                      'aaaaaaabaaaaaaab', 'Ã©clair', 'This is a \
# sentence longer than the others and has spaces too, with punctuation.'])
# def test_fail_on_sending_message(message):
#     """Test that message received from server is a 400 response."""
#     from client import client
#     assert client(message).split('\r\n')[0] == 'HTTP/1.1 400 Bad Request'


def test_success_on_sending_http_requests():
    """Test that message received from server is a 200 response."""
    from client import client
    req = 'GET /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
\r\n'
    assert client(req).split('\r\n')[0] == 'HTTP/1.1 200 OK'


def test_fail_on_sending_non_get_http_requests():
    """Test that message received from server is a 405 response."""
    from client import client
    req = 'POST /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
\r\n'
    assert client(req).split('\r\n')[0] == 'HTTP/1.1 405 Method Not Allowed'


def test_ok_response_well_formatted(fake_socket):
    """Test that formatting of 200 HTTP response is correct."""
    from server import response_ok
    from datetime import datetime as time

    if sys.version_info.major == 3:
        from http.client import HTTPResponse
    else:
        from httplib import HTTPResponse

    source = fake_socket(response_ok())
    response = HTTPResponse(source)
    response.begin()
    assert response.status == 200
    assert time.strptime(response.getheader('Date'),
                         '%a, %d %b %Y %H:%M:%S %Z')


def test_error_response_500_well_formatted(fake_socket):
    """Test that error reponse of 500 HTTP response is correct."""
    from server import response_error
    from datetime import datetime as time

    if sys.version_info.major == 3:
        from http.client import HTTPResponse
    else:
        from httplib import HTTPResponse

    source = fake_socket(response_error(500, 'Internal Server Error'))
    response = HTTPResponse(source)
    response.begin()
    assert response.status == 500
    assert time.strptime(response.getheader('Date'),
                         '%a, %d %b %Y %H:%M:%S %Z')


def test_error_response_501_well_formatted(fake_socket):
    """Test that error reponse of 501 HTTP response is correct."""
    from server import response_error
    from datetime import datetime as time

    if sys.version_info.major == 3:
        from http.client import HTTPResponse
    else:
        from httplib import HTTPResponse

    source = fake_socket(response_error(501, 'Not Implemented'))
    response = HTTPResponse(source)
    response.begin()
    assert response.status == 501
    assert time.strptime(response.getheader('Date'),
                         '%a, %d %b %Y %H:%M:%S %Z')


def test_error_response_400_well_formatted(fake_socket):
    """Test that error reponse of 400 HTTP response is correct."""
    from server import response_error
    from datetime import datetime as time

    if sys.version_info.major == 3:
        from http.client import HTTPResponse
    else:
        from httplib import HTTPResponse

    source = fake_socket(response_error(400, 'Bad Request'))
    response = HTTPResponse(source)
    response.begin()
    assert response.status == 400
    assert time.strptime(response.getheader('Date'),
                         '%a, %d %b %Y %H:%M:%S %Z')


def test_error_response_404_well_formatted(fake_socket):
    """Test that error reponse of 404 HTTP response is correct."""
    from server import response_error
    from datetime import datetime as time

    if sys.version_info.major == 3:
        from http.client import HTTPResponse
    else:
        from httplib import HTTPResponse

    source = fake_socket(response_error(404, 'Not Found'))
    response = HTTPResponse(source)
    response.begin()
    assert response.status == 404
    assert time.strptime(response.getheader('Date'),
                         '%a, %d %b %Y %H:%M:%S %Z')


def test_error_response_405_well_formatted(fake_socket):
    """Test that error reponse of 405 HTTP response is correct."""
    from server import response_error
    from datetime import datetime as time

    if sys.version_info.major == 3:
        from http.client import HTTPResponse
    else:
        from httplib import HTTPResponse

    source = fake_socket(response_error(405, 'Method Not Allowed'))
    response = HTTPResponse(source)
    response.begin()
    assert response.status == 405
    assert time.strptime(response.getheader('Date'),
                         '%a, %d %b %Y %H:%M:%S %Z')


def test_valid_parse_http_request():
    """Test the parse_request accepts valid GET http request."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
\r\n'
    assert parse_request(req) == b'/index.html'


def test_request_parse_invalid_missing_host_header():
    """Test for invalid missing host header."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
From: frog@j.money.com\r\n\
User-Agent: Mozilla/3.0Gold\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_number_of_lines():
    """Test if not three lines in request, raises ValueError."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_line_formatting():
    """Test if line is properly formatted with carriage returns."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
DATE:\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_method_uri_protocol_line_formatting():
    """Test if the first line of req is properly formatted with white space."""
    from server import parse_request
    req = b'GET / index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


@pytest.mark.parametrize('method', ['POST', 'PUT', 'DELETE', 'HEAD', 'get'])
def test_request_parse_invalid_method_is_not_get(method):
    """Test if the method is for a GET request."""
    from server import parse_request
    req = '{} /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
\r\n'.format(method).encode('utf8')
    with pytest.raises(NotImplementedError):
        parse_request(req)


@pytest.mark.parametrize('protocol', ['HTTP/1.2', 'HTTP/1.0', 'HTTP',
                                      'http/1.1'])
def test_request_parse_invalid_protocol_is_not_http_11(protocol):
    """Test if the protocol is for HTTP/1.1."""
    from server import parse_request
    req = 'GET /index.html {}\r\n\
Host: www.example.com\r\n\
\r\n'.format(protocol).encode('utf8')
    with pytest.raises(NotImplementedError):
        parse_request(req)


def test_request_parse_invalid_uri_is_not_file_path():
    """Test if the uri is a valid file path."""
    from server import parse_request
    req = b'GET index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_left_justified_header_name():
    """Test if the header name is left justifiied."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
    Content-Type: text/plain\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_missing_colon_header_name():
    """Test if the header name is missing a colon."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.example.com\r\n\
Content-Type : text/plain\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_url_for_host_value():
    """Test if the URL for the Host uses proper characters."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.example.com!\r\n\
Content-Type: text/plain\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_request_parse_invalid_url_with_unicode_for_host_value():
    """Test if the URL for the Host does not use accented characters."""
    from server import parse_request
    req = b'GET /index.html HTTP/1.1\r\n\
Host: www.ex\xc3\xa5mple.com\r\n\
Content-Type: text/plain\r\n\
\r\n'
    with pytest.raises(ValueError):
        parse_request(req)


def test_resolve_uri_accessing_html_in_root():
    """Test if can access HTML file in the root directory."""
    from server import resolve_uri
    assert resolve_uri('/a_web_page.html') == (b"""<!DOCTYPE html>
<html>
<body>

<h1>Code Fellows</h1>

<p>A fine place to learn Python web programming!</p>

</body>
</html>

""", 'text/html')


def test_resolve_uri_accessing_py_in_root():
    """Test if can access a Python file in the root directory."""
    from server import resolve_uri
    assert resolve_uri('/make_time.py') == (b"""#!/usr/bin/env python

\"\"\"
make_time.py

simple script that returns and HTML page with the current time
\"\"\"

import datetime

time_str = datetime.datetime.now().isoformat()

html = \"\"\"
<http>
<body>
<h2> The time is: </h2>
<p> %s <p>
</body>
</http>
\"\"\" % time_str

print(html)
""", 'text/x-python')


def test_resolve_uri_accessing_plain_text_in_root():
    """Test if can access a plain text file in the root directory."""
    from server import resolve_uri
    assert resolve_uri('/sample.txt') == (b"""This is a very simple text file.
Just to show that we can serve it up.
It is three lines long.
""", 'text/plain')


def test_resolve_uri_accessing_png_in_sub_dir():
    """Test if can access a plain text file in the root directory."""
    from server import resolve_uri
    assert resolve_uri('/images/sample_1.png') == (b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x04\xb0\x00\x00\x04\xb0\x08\x06\x00\x00\x00\xeb!\xb3\xcf\x00\x00\x00\x04sBIT\x08\x08\x08\x08|\x08d\x88\x00\x00\x00\tpHYs\x00\x00\x0b\x12\x00\x00\x0b\x12\x01\xd2\xdd~\xfc\x00\x00\x00\x15tEXtCreation Time\x003/28/09\xee/\xfb\xfc\x00\x00\x00\x1ctEXtSoftware\x00Adobe Fireworks CS3\x98\xd6F\x03\x00\x00 \x00IDATx\x9c\xec\xda1n\xc3@\x10\x04A\x9e\xc1\xff\x7fy\x1d:s$z\xdbR\xd5\x0b&\xe1\x81h\xec\x99\xeb\x9a\x0b\x00\x80\x979\xfe\xae\x00\x00^\xeak{\x00\x00\x00\x00\x00\xfcF\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 \xed\xde\x1e\x00<\xefl\x0f\x00\xf84\x1e^\x80\xbf5\xdb\x03\x80\xa7\xb9\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 \xed\xde\x1e\x00P33\xdb\x13\x00\x80\x0fw\xce\xd9\x9e\x00\x90\xe2\x02\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x80\xb4{{\x00\xc0G:g{\x01\xf0\xa03\xdb\x0b\x80'\xcd\xe5#\x07\xf8k.\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H\xbb\xb7\x07\x00\x00\xbc\x9d3\xdb\x0b\x80'\xf9\xc4{\xbc\xbb\xf0\xf6\\`\x01\x00\x00\x00\x90&`\x01\x00\x00\x00\x90v_3g{\x04\xf0\xe3\x9cG>I7\xd51\xe7\xba\xbc\xbd\xf0\xde\xbc\xbb\x00\x00/\xe4\x02\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x804\x01\x0b\x00\x00\x00\x80\xb4{{\x00\xc0'\x9a\x99\xd9\xde\x00\x00\x00\xf0_\xb8\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x02\x00\x00\x00 M\xc0\x82\xefv\xed\x18\x85a \x08\x82 \x07\xfa\xff\x97\xd7\xa9\x1d8\x12x\x1b\xb9\xea\x05\x137\x03\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4\tX\x00\x00\x00\x00\xa4]\xdb\x03\x00j\xce9\xdb\x13\x00\x00\x00x\xe3\x81\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\x9a\x80\x05\x00\x00\x00@\xda\xb5=\x00\xf8\x89\xb3=\x00\xe0\xbf\xccl/\x00\x00x\x12\x0f,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\xae\xed\x01\xc0\xa7\x99\xd9\x9e\x00\xc0M\xe7l/\x00\x00x\x16\x0f,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\xbd\xde\x00\x13\x00\x00\x01\x85IDAT\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\x04,\x00\x00\x00\x00\xd2\xce\xcclo\x00\x00\x00\x00\x80\xaf<\xb0\x00\x00\x00\x00H\x13\xb0\x00\x00\x00\x00H{\x010m&k\x81\xac\xde\x1e\x00\x00\x00\x00IEND\xaeB`\x82",
                                                   'image/png')


def test_resolve_uri_failure_from_leaving_root_dir():
    """Test moving up a directory from the root is invalid."""
    from server import resolve_uri
    with pytest.raises(OSError):
        resolve_uri('/../sample.txt')

"""
https://stackoverflow.com/questions/24728088/python-parse-http-response-string
Answer by Jeremy Allen
Written in Python 2
# for python 2
from httplib import HTTPResponse
from StringIO import StringIO
# for python 3
from http.client import HTTPResponse
from io import BytesIO

http_response_str = "HTTP/1.1 200 OK
Date: Thu, Jul  3 15:27:54 2014
Content-Type: text/xml; charset="utf-8"
Connection: close
Content-Length: 626"

class FakeSocket():
    def __init__(self, response_str):
        self._file = StringIO(response_str)
    def makefile(self, *args, **kwargs):
        return self._file

source = FakeSocket(http_response_str)
response = HTTPResponse(source)
response.begin()
print "status:", response.status
print "single header:", response.getheader('Content-Type')
print "content:", response.read(len(http_response_str))
# the len here will give a 'big enough' value to read the whole content
"""
